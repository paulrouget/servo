apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        applicationId "com.mozilla.servo"
        minSdkVersion 18
        targetSdkVersion 25
        versionCode 1
        versionName "1.0.0"
        jackOptions {
            enabled true
        }
    }

    productFlavors {
        main {
        }
        googlevr {
            minSdkVersion 21
        }
        oculusvr {
            minSdkVersion 21
        }
    }

    buildTypes {
        debug {
            jniDebuggable true
        }
        release {
            signingConfig signingConfigs.debug // Change this to sign with a production key
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        armDebug {
            initWith(debug)
            ndk {
                abiFilters getNDKAbi('arm')
            }
        }
        armRelease {
            initWith(release)
            ndk {
                abiFilters getNDKAbi('arm')
            }
        }
        armv7Debug {
            initWith(debug)
            ndk {
                abiFilters getNDKAbi('armv7')
            }
        }
        armv7Release {
            initWith(release)
            ndk {
                abiFilters getNDKAbi('armv7')
            }
        }
        arm64Debug {
            initWith(debug)
            ndk {
                abiFilters getNDKAbi('arm64')
            }
        }
        arm64Release {
            initWith(release)
            ndk {
                abiFilters getNDKAbi('arm64')
            }
        }
        x86Debug {
            initWith(debug)
            ndk {
                abiFilters getNDKAbi('x86')
            }
        }
        x86Release {
            initWith(release)
            ndk {
                abiFilters getNDKAbi('x86')
            }
        }
    }

    // Ignore default 'debug' and 'release' build types
    variantFilter { variant ->
        if(variant.buildType.name.equals('release') || variant.buildType.name.equals('debug')) {
            variant.setIgnore(true);
        }
    }
    
    // Define apk output directory
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def name = variant.buildType.name
            output.outputFile = new File(getApkPath(isDebug(name), getArch(name)))
        }
    }

    sourceSets {
        main {
            java.srcDirs = ['src/main/java']
            assets.srcDirs = ['../../../../resources']
        }
    }

    // Define apk output directory
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def name = variant.buildType.name
            output.outputFile = new File(getApkPath(isDebug(name), getArch(name)))
        }
    }

}

dependencies {
    compile 'com.android.support.constraint:constraint-layout:1.0.0'
    compile(name:'servoview', ext:'aar')
}

String getTargetDir(boolean debug, String arch) {
    def basePath = project.rootDir.getParentFile().getParentFile().getParentFile().absolutePath
    return basePath + '/target/' + getRustTarget(arch) + '/' + (debug ? 'debug' : 'release')
}

String getApkPath(boolean debug, String arch) {
    return getTargetDir(debug, arch) + '/servo.apk'
}

String getArch(String buildType) {
    return buildType.replaceAll(/(Debug|Release)/, '')
}

boolean isDebug(String buildType) {
    return buildType.contains("Debug")
}

String getRustTarget(String arch) {
    switch (arch.toLowerCase()) {
        case 'arm' : return 'arm-linux-androideabi'
        case 'armv7' : return 'armv7-linux-androideabi'
        case 'arm64' : return 'aarch64-linux-android'
        case 'x86' : return 'i686-linux-android'
        default: throw new GradleException("Invalid target architecture " + arch)
    }
}

String getNDKAbi(String arch) {
    switch (arch.toLowerCase()) {
        case 'arm' : return 'armeabi'
        case 'armv7' : return 'armeabi-v7a'
        case 'arm64' : return 'arm64-v8a'
        case 'x86' : return 'x86'
        default: throw new GradleException("Invalid target architecture " + arch)
    }
}

